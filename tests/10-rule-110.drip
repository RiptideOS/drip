//! This example is an implementation of the Rule 110 algorithm, commonly used to
//! show that a programming language is turring complete

// This is where we get Int32Vec
include core::collections;

/// Applies Rule 110 to a given neighborhood.
fn rule110(neighborhood: (i32, i32, i32)) {
    if neighborhood == (1, 1, 1) {
        0
    } else if neighborhood == (1, 1, 0) {
        1
    } else if neighborhood == (1, 0, 1) {
         1
    } else if neighborhood == (1, 0, 0) {
        0
    } else if neighborhood == (0, 1, 1) {
        1
    } else if neighborhood == (0, 1, 0) {
        1
    } else if neighborhood == (0, 0, 1) {
        1
    } else if neighborhood == (0, 0, 0) {
         0
    } else {
        unreachable()
    }
}

/// Evolves a row of cells over a number of generations.
fn evolve(initial_cells: Int32Vec, generations: usize) {
    let mut previous_cells = cells;
    let mut current_cells = Int32Vec::new();

    for _ in 0..generations {
        current_cells.clear();

        let previous_len = previous_cells.length;

        for i in 0..previous_len {
            let neighborhood = (
                previous_cells[(i - 1) % previous_len],
                previous_cells[i],
                previous_cells[(i + 1) % previous_len],
            );
            current_cells.push(rule110(neighborhood));
        }

        for cell in current_cells {
            if cell == 1 {
                print("â– ");
            } else {
                print(" ");
            }
        }

        println("");

        swap(previous_cells, current_cells);
    }
}

fn main() {
    let initial_cells = [0, 0, 0, 0, 1, 0, 0, 0, 0];
    let generations = 20;

    evolve(initial_cells, generations)
}